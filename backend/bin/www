var app = require('../app');
var debug = require('debug')('paw:server');
var http = require('http');
const { Server } = require('socket.io');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

// Socket.io setup
const io = new Server(server, {
  cors: {
    origin: 'http://localhost:4200',
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// Socket.io events
io.on('connection', (socket) => {

  socket.on('joinConversation', (conversationId) => {
    socket.join(conversationId);
  });

  // Join user room for notifications
  socket.on('joinUserRoom', (userId) => {
    socket.join(`user-${userId}`);
  });

  // Notificação de nova mensagem para badge
  socket.on('sendMessage', async (data) => {
    io.to(data.conversationId).emit('receiveMessage', data.message);
    // Notificar admin para TODAS as mensagens/conversas
    io.to('admin-room').emit('newMessageNotification', data.conversationId);
    // Notificar outros participantes (exemplo para managers)
    if (data.notifyParticipants) {
      data.notifyParticipants.forEach(pid => {
        if (pid !== data.message.sender) {
          io.to(`user-${pid}`).emit('newMessageNotification', data.conversationId);
        }
      });
    }
  });

  // Permitir que o admin entre numa sala especial para receber notificações
  socket.on('joinAdminRoom', () => {
    socket.join('admin-room');
  });

  // Evento para indicar que o usuário está digitando
  socket.on('typing', (data) => {
    socket.to(data.conversationId).emit('typing');
  });

  socket.on('disconnect', () => {
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}