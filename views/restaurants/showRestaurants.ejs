<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Available Restaurants</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/stylesheets/restaurants/showRestaurants.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter&display=swap" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="icon" type="image/png" href="/favicon.png">
  </head>
  <body>
    <%- include('../partials/header') %>

    <% if (user.role === 'Manager' || user.role === 'Admin') { %>
      <div class="create-restaurant-btn">
        <a href="/restaurants/submitRestaurant" class="btn btn-info">Create New Restaurant</a>
      </div>
    <% } %>

    <div class="container mt-4">
      <h1>Available Restaurants</h1>

      <div class="filters-section mb-4">
        <form id="filtersForm" method="GET" action="/restaurants/showRestaurants" class="row g-3 align-items-end">
          <!-- Filtro por Nome -->
          <div class="col-md-4">
            <label for="name" class="form-label">Restaurant Name</label>
            <input type="text" id="name" name="name" class="form-control" placeholder="Search by Name" value="<%= filters.name || '' %>">
          </div>

          <!-- Filtro por Localização -->
          <div class="col-md-4">
            <label for="address" class="form-label">Location</label>
            <input type="text" id="address" name="address" class="form-control" placeholder="Search by Location" value="<%= filters.address || '' %>">
          </div>

          <!-- Ordenação -->
          <div class="col-md-4">
            <label for="sortBy" class="form-label">Sort By</label>
            <select id="sortBy" name="sortBy" class="form-select">
              <option value="name" <%= filters.sortBy === 'name' ? 'selected' : '' %>>Name</option>
              <option value="averagePrice" <%= filters.sortBy === 'averagePrice' ? 'selected' : '' %>>Price</option>
              <option value="location" <%= filters.sortBy === 'location' ? 'selected' : '' %>>Location</option>
            </select>
          </div>
          <div class="col-md-2">
            <label for="order" class="form-label">Order</label>
            <select id="order" name="order" class="form-select">
              <option value="asc" <%= filters.order === 'asc' ? 'selected' : '' %>>Ascending</option>
              <option value="desc" <%= filters.order === 'desc' ? 'selected' : '' %>>Descending</option>
            </select>
          </div>
        </form>
      </div>

      <% if (restaurants.length === 0) { %>
        <div class="alert alert-warning text-center">
          <h3>No restaurants found.</h3>
        </div>
      <% } else { %>
        <div class="row g-4">
          <% restaurants.forEach(function(restaurant) {
            const isManager = user.role === 'Manager' && restaurant.managerId?.toString() === user._id.toString();
            const isAdmin = user.role === 'Admin';
            const isClient = user.role === 'Client';
            const canView = restaurant.isApproved || isAdmin || isManager || (isClient && restaurant.isApproved);
            if (canView) { %>
              <div class="col-md-6 col-lg-4">
                <div class="card h-100">
                  <div class="card-body d-flex flex-column justify-content-between">
                    <div>
                      <h5 class="card-title d-flex align-items-center justify-content-between">
                        <%= restaurant.name %>
                        <% if (restaurant.isApproved) { %>
                          <span class="badge bg-success text-light">Approved</span>
                        <% } else { %>
                          <span class="badge bg-danger text-light">Not approved</span>
                        <% } %>
                      </h5>
                      <p class="mb-2"><strong>Street:</strong> <%= restaurant.address %></p>
                      <p class="mb-1">Menu(s):</p>
                      <% if (restaurant.menus && restaurant.menus.length > 0) { %>
                        <ul class="list-group">
                          <li class="list-group-item">
                            - <%= restaurant.menus[0].name %> <!-- Exibe o primeiro menu -->
                            <% if (restaurant.menus.length > 1) { %>
                              <span class="text-muted">
                                +<%= restaurant.menus.length - 1 %> more
                              </span>
                            <% } %>
                          </li>
                        </ul>
                      <% } else { %>
                        <p class="text-muted">This restaurant has no menus associated yet.</p>
                      <% } %>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                      <% if (isAdmin) { %>
                        <a href="/restaurants/showRestaurant/<%= restaurant.name %>" class="btn btn-sm btn-outline-primary">View</a>
                        <a href="/restaurants/editRestaurant/<%= restaurant._id %>" class="btn btn-sm btn-outline-secondary">Edit</a>
                        <button class="btn btn-sm btn-outline-danger delete-restaurant-btn" data-restaurant-id="<%= restaurant._id %>">Delete</button>
                        <button class="btn btn-sm btn-outline-warning toggle-visibility-btn" data-restaurant-id="<%= restaurant._id %>" data-is-visible="<%= restaurant.isVisible %>">
                          <%= restaurant.isVisible ? 'Hide' : 'Show' %>
                        </button>
                      <% } else if (isManager) { %>
                        <% if (restaurant.isApproved) { %>
                          <a href="/restaurants/showRestaurant/<%= restaurant.name %>" class="btn btn-sm btn-outline-primary">View</a>
                          <a href="/restaurants/editRestaurant/<%= restaurant._id %>" class="btn btn-sm btn-outline-secondary">Edit</a>
                        <% } %>
                        <button class="btn btn-sm btn-outline-danger delete-restaurant-btn" data-restaurant-id="<%= restaurant._id %>">Delete</button>
                        <button class="btn btn-sm btn-outline-warning toggle-visibility-btn" data-restaurant-id="<%= restaurant._id %>" data-is-visible="<%= restaurant.isVisible %>">
                          <%= restaurant.isVisible ? 'Hide' : 'Show' %>
                        </button>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>
          <% } }); %>
        </div>
      <% } %>

      <!-- Paginação -->
      <div class="text-center mt-5">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>" class="btn btn-outline-primary me-2">Previous</a>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>" class="btn <%= currentPage === i ? 'btn-primary' : 'btn-outline-primary' %> me-2"><%= i %></a>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>" class="btn btn-outline-primary">Next</a>
        <% } %>
      </div>
    </div>

    <script>
      // Função para reaplicar eventos aos elementos
      function applyEventListeners() {
        // Reaplicar eventos aos botões de exclusão
        document.querySelectorAll('.delete-restaurant-btn').forEach(button => {
          button.addEventListener('click', function () {
            const restaurantId = this.getAttribute('data-restaurant-id');
    
            Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#ef4444',
              cancelButtonColor: '#6b7280',
              confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
              if (result.isConfirmed) {
                fetch(`/restaurants/deleteRestaurant/${restaurantId}`, {
                  method: 'POST'
                }).then(response => {
                  if (response.ok) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Deleted!',
                      text: 'The restaurant has been deleted.',
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => window.location.reload());
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Error!',
                      text: 'Failed to delete the restaurant.'
                    });
                  }
                });
              }
            });
          });
        });
    
        // Reaplicar eventos aos campos de filtro
        const filtersForm = document.getElementById('filtersForm');
        const filterInputs = filtersForm.querySelectorAll('input, select');
    
        // Função debounce para atrasar a execução
        function debounce(func, delay) {
          let timeout;
          return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
          };
        }
    
        // Função para atualizar os resultados dinamicamente
        const updateResults = debounce(() => {
          // Salvar o estado atual dos filtros
          const formData = new FormData(filtersForm);
          const queryString = new URLSearchParams(formData).toString();
          const url = `${filtersForm.action}?${queryString}`;
    
          // Atualizar a página com os novos resultados
          fetch(url)
            .then(response => response.text())
            .then(html => {
              // Substituir o conteúdo da lista de restaurantes
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newContent = doc.querySelector('.container.mt-4').innerHTML;
              document.querySelector('.container.mt-4').innerHTML = newContent;
    
              // Reaplicar eventos aos novos elementos
              applyEventListeners();
            })
            .catch(error => console.error('Error fetching filtered results:', error));
        }, 300); // Atraso de 300ms
    
        // Adicionar evento de input e change com debounce
        filterInputs.forEach(input => {
          input.addEventListener('input', updateResults);
          input.addEventListener('change', updateResults); // Para selects
        });
      }
    
      // Aplicar eventos iniciais
      applyEventListeners();

      document.addEventListener('DOMContentLoaded', () => {
        // Adicionar evento aos botões de alternância de visibilidade
        document.querySelectorAll('.toggle-visibility-btn').forEach(button => {
          button.addEventListener('click', function () {
            const restaurantId = this.getAttribute('data-restaurant-id');
            const isVisible = this.getAttribute('data-is-visible') === 'true';

            // Enviar solicitação para alternar visibilidade
            fetch(`/restaurants/toggleVisibility/${restaurantId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ isVisible: !isVisible }),
            })
              .then(response => {
                if (response.ok) {
                  // Atualizar o botão após a alternância
                  this.setAttribute('data-is-visible', !isVisible);
                  this.textContent = !isVisible ? 'Hide' : 'Show';
                  Swal.fire({
                    icon: 'success',
                    title: 'Updated!',
                    text: `The restaurant is now ${!isVisible ? 'visible' : 'hidden'}.`,
                    timer: 1500,
                    showConfirmButton: false,
                  });
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to update visibility.',
                  });
                }
              })
              .catch(error => {
                console.error('Error toggling visibility:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: 'An unexpected error occurred.',
                });
              });
          });
        });
      });
    </script>
  </body>
</html>
