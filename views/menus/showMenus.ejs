<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Available Menus</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/stylesheets/menus/showMenus.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter&display=swap" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="icon" type="image/png" href="/favicon.png">
  </head>
  <body>
    <%- include('../partials/header') %> 

    <% if (user.role === 'Manager' || user.role === 'Admin') { %>
      <div class="create-menu-btn">
        <a href="/menus/submitMenu" class="btn btn-info">Create New Menu</a>
      </div>
    <% } %>

    <div class="container">
      <h1>Available Menus</h1>

      <div class="filters-section mb-4">
        <form id="filtersForm" method="GET" action="/menus/showMenus" class="row g-3 align-items-end">
          <!-- Filtro por Nome -->
          <div class="col-md-4">
            <label for="name" class="form-label">Menu Name</label>
            <input type="text" id="name" name="name" class="form-control" placeholder="Search by Name" value="<%= filters.name || '' %>">
          </div>
      
          <!-- Ordenação -->
          <div class="col-md-4">
            <label for="sortBy" class="form-label">Sort By</label>
            <select id="sortBy" name="sortBy" class="form-select">
              <option value="name" <%= filters.sortBy === 'name' ? 'selected' : '' %>>Name</option>
              <option value="price" <%= filters.sortBy === 'price' ? 'selected' : '' %>>Price</option>
            </select>
          </div>
          <div class="col-md-2">
            <label for="order" class="form-label">Order</label>
            <select id="order" name="order" class="form-select">
              <option value="asc" <%= filters.order === 'asc' ? 'selected' : '' %>>Ascending</option>
              <option value="desc" <%= filters.order === 'desc' ? 'selected' : '' %>>Descending</option>
            </select>
          </div>
        </form>
      </div>

      <% if (menus.length === 0) { %>
        <div class="alert alert-warning text-center">
          <h3>No menus found.</h3>
        </div>
      <% } else { %>
        <div class="row g-4">
          <% menus.forEach(function(menu) { 
            const isManagerMenu = menu.managerId && user.role === 'Manager' &&
              menu.managerId.toString() === user._id.toString(); 
            const isVisibleToClient = user.role === 'Client' && menu.isVisible; // Clientes só podem ver menus visíveis
          %>
            <% if (user.role === 'Admin' || isManagerMenu || isVisibleToClient) { %>
              <div class="col-md-6 col-lg-4">
                <div class="card h-100">
                  <% if (menu.menuPic) { %>
                    <div class="text-center mb-3 menu-img-container">
                      <img src="/uploads/<%= menu.menuPic %>" alt="<%= menu.name %>" class="menu-img" />
                      <div class="overlay-text"><%= menu.name %></div> <!-- Texto sobreposto (opcional) -->
                    </div>
                  <% } else { %>
                    <p class="text-center"><em>No image available for this menu.</em></p>
                  <% } %>
                  <div class="card-body d-flex flex-column justify-content-between">                    <p class="mb-1">Restaurant(s):</p>
                    <% if (menu.restaurantNames && menu.restaurantNames.length > 0) { %>
                      <ul class="list-group">
                        <li class="list-group-item">
                          - <%= menu.restaurantNames[0] %> <!-- Exibe o primeiro restaurante -->
                          <% if (menu.restaurantNames.length > 1) { %>
                            <span class="text-muted">
                              +<%= menu.restaurantNames.length - 1 %> more
                            </span>
                          <% } %>
                        </li>
                      </ul>
                    <% } else { %>
                      <p class="text-muted">This menu is not associated with any restaurant yet.</p>
                    <% } %>                                                    
                    <div class="d-flex justify-content-between mt-3">
                      <a href="/menus/showMenu/<%= menu._id %>" class="btn btn-sm btn-outline-primary">View</a>
                      <% if (user.role === 'Admin' || isManagerMenu) { %>
                        <a href="/menus/editMenu/<%= menu._id %>" class="btn btn-sm btn-outline-secondary">Edit</a>
                        <button class="btn btn-sm btn-outline-danger delete-menu-btn" data-menu-id="<%= menu._id %>">Delete</button>
                        <button class="btn btn-sm btn-outline-warning toggle-visibility-btn" data-menu-id="<%= menu._id %>" data-is-visible="<%= menu.isVisible %>">
                          <%= menu.isVisible ? 'Hide' : 'Show' %>
                        </button>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>
            <% } %>
          <% }) %>
        </div>
      <% } %>

      <!-- Paginação -->
      <div class="text-center mt-5">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>" class="btn btn-outline-primary me-2">Previous</a>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>" class="btn <%= currentPage === i ? 'btn-primary' : 'btn-outline-primary' %> me-2"><%= i %></a>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>" class="btn btn-outline-primary">Next</a>
        <% } %>
      </div>
    </div>

    <script>
      // Função para reaplicar eventos aos elementos
      function applyEventListeners() {
        // Reaplicar eventos aos botões de exclusão
        document.querySelectorAll('.delete-menu-btn').forEach(button => {
          button.addEventListener('click', function () {
            const menuId = this.getAttribute('data-menu-id');
    
            Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#ef4444',
              cancelButtonColor: '#6b7280',
              confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
              if (result.isConfirmed) {
                fetch(`/menus/deleteMenu/${menuId}`, {
                  method: 'POST'
                }).then(response => {
                  if (response.ok) {
                    Swal.fire({
                      icon: 'success',
                      title: 'Deleted!',
                      text: 'The menu has been deleted.',
                      timer: 1500,
                      showConfirmButton: false
                    }).then(() => window.location.reload());
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Error!',
                      text: 'Failed to delete the menu.'
                    });
                  }
                });
              }
            });
          });
        });
    
        // Reaplicar eventos aos campos de filtro
        const filtersForm = document.getElementById('filtersForm');
        const filterInputs = filtersForm.querySelectorAll('input, select');
    
        // Função debounce para atrasar a execução
        function debounce(func, delay) {
          let timeout;
          return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
          };
        }
    
        // Função para atualizar os resultados dinamicamente
        const updateResults = debounce(() => {
          // Salvar o estado atual dos filtros
          const formData = new FormData(filtersForm);
          const queryString = new URLSearchParams(formData).toString();
          const url = `${filtersForm.action}?${queryString}`;
    
          // Atualizar a página com os novos resultados
          fetch(url)
            .then(response => response.text())
            .then(html => {
              // Substituir o conteúdo da lista de menus
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newContent = doc.querySelector('.container').innerHTML;
              document.querySelector('.container').innerHTML = newContent;
    
              // Reaplicar eventos aos novos elementos
              applyEventListeners();
            })
            .catch(error => console.error('Error fetching filtered results:', error));
        }, 300); // Atraso de 300ms
    
        // Adicionar evento de input e change com debounce
        filterInputs.forEach(input => {
          input.addEventListener('input', updateResults);
          input.addEventListener('change', updateResults); // Para selects
        });
      }
    
      // Aplicar eventos iniciais
      applyEventListeners();
      document.addEventListener('DOMContentLoaded', () => {
        // Adicionar evento aos botões de alternância de visibilidade
        document.querySelectorAll('.toggle-visibility-btn').forEach(button => {
          button.addEventListener('click', function () {
            const menuId = this.getAttribute('data-menu-id');
            const isVisible = this.getAttribute('data-is-visible') === 'true';

            // Enviar solicitação para alternar visibilidade
            fetch(`/menus/toggleVisibility/${menuId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ isVisible: !isVisible }),
            })
              .then(response => {
                if (response.ok) {
                  // Atualizar o botão após a alternância
                  this.setAttribute('data-is-visible', !isVisible);
                  this.textContent = !isVisible ? 'Hide' : 'Show';
                  Swal.fire({
                    icon: 'success',
                    title: 'Updated!',
                    text: `The menu is now ${!isVisible ? 'visible' : 'hidden'}.`,
                    timer: 1500,
                    showConfirmButton: false,
                  });
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to update visibility.',
                  });
                }
              })
              .catch(error => {
                console.error('Error toggling visibility:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: 'An unexpected error occurred.',
                });
              });
          });
        });
      });
    </script>
  </body>
</html>
